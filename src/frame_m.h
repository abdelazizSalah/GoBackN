//
// Generated file, do not edit! Created by opp_msgtool 6.0 from frame.msg.
//

#ifndef __FRAME_M_H
#define __FRAME_M_H

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>
// #include "defs.h"
// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION != OMNETPP_VERSION)
#error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Frame;
/**
 * Class generated from <tt>frame.msg:2</tt> by opp_msgtool.
 * <pre>
 * packet Frame
 * {
 *     \@customize(true);
 *     unsigned int Header;
 *     string Payload;
 *     char Trailer;
 *     int FrameType;
 *     unsigned int AckNum;
 * }
 * </pre>
 *
 * Frame_Base is only useful if it gets subclassed, and Frame is derived from it.
 * The minimum code to be written for Frame is the following:
 *
 * <pre>
 * class Frame : public Frame_Base
 * {
 *   private:
 *     void copy(const Frame& other) { ... }

 *   public:
 *     Frame(const char *name=nullptr, short kind=0) : Frame_Base(name,kind) {}
 *     Frame(const Frame& other) : Frame_Base(other) {copy(other);}
 *     Frame& operator=(const Frame& other) {if (this==&other) return *this; Frame_Base::operator=(other); copy(other); return *this;}
 *     virtual Frame *dup() const override {return new Frame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Frame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Frame)
 * </pre>
 */
class Frame_Base : public ::omnetpp::cPacket
{
protected:
  // the header contains the sequence number.
  unsigned int Header = 0;
  omnetpp::opp_string Payload;
  char Trailer = 0;
  int FrameType = 0;
  unsigned int AckNum = 0;

  void copy(const Frame_Base& other);

  bool operator==(const Frame_Base&) = delete;

public:
  Frame_Base();
  // make constructors protected to avoid instantiation
  // Frame_Base(const char *name = nullptr, short kind = 0);
  // Frame_Base(const Frame_Base &other);
  // make assignment operator protected to force the user override it
  Frame_Base& operator=(const Frame_Base& other);
  virtual ~Frame_Base();
  virtual Frame_Base* dup() const override {
    // throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class Frame");
    return new Frame_Base(*this);
  }
  virtual void parsimPack(omnetpp::cCommBuffer* b) const override;
  virtual void parsimUnpack(omnetpp::cCommBuffer* b) override;

  virtual unsigned int getHeader() const;
  virtual void setHeader(unsigned int Header);

  virtual const char* getPayload() const;
  virtual void setPayload(const char* Payload);

  virtual char getTrailer() const;
  virtual void setTrailer(char Trailer);

  virtual int getFrameType() const;
  virtual void setFrameType(int FrameType);

  virtual unsigned int getAckNum() const;
  virtual void setAckNum(unsigned int AckNum);
};

namespace omnetpp
{

  template <>
  inline Frame_Base* fromAnyPtr(any_ptr ptr) { return check_and_cast<Frame_Base*>(ptr.get<cObject>()); }

} // namespace omnetpp

#endif // ifndef __FRAME_M_H
